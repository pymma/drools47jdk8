package org.drools.solver.evaluation

import org.drools.solver.core.evaluation.scorecalculator.HardAndSoftConstraintScoreCalculator;

import org.drools.solver.examples.travelingtournament.domain.Match;
import org.drools.solver.examples.travelingtournament.domain.Day;
import org.drools.solver.examples.travelingtournament.domain.Team;
import org.drools.solver.examples.travelingtournament.domain.TravelingTournament;
import org.drools.solver.examples.travelingtournament.solver.domain.Hop;
import org.drools.solver.examples.common.solver.domain.WorkaroundMultiplePatternAccumulate;

global HardAndSoftConstraintScoreCalculator scoreCalculator;

// multipleMatchesPerTeamPerDay is obsolete because it is always 0

//query "fourConsecutiveHomeMatches"
//    Match($homeTeam : homeTeam, $day1 : day);
//    Match(homeTeam == $homeTeam, eval(day.getIndex() == $day1.getIndex() + 1));
//    Match(homeTeam == $homeTeam, eval(day.getIndex() == $day1.getIndex() + 2));
//    Match(homeTeam == $homeTeam, eval(day.getIndex() == $day1.getIndex() + 3));
//end
//
//query "fourConsecutiveAwayMatches"
//    Match($awayTeam : awayTeam, $day1 : day);
//    Match(awayTeam == $awayTeam, eval(day.getIndex() == $day1.getIndex() + 1));
//    Match(awayTeam == $awayTeam, eval(day.getIndex() == $day1.getIndex() + 2));
//    Match(awayTeam == $awayTeam, eval(day.getIndex() == $day1.getIndex() + 3));
//end
//
//query "matchRepeater"
//    Match($homeTeam : homeTeam, $awayTeam : awayTeam, $day1 : day);
//    Match(homeTeam == $awayTeam, awayTeam == $homeTeam, eval(day.getIndex() == $day1.getIndex() + 1));
//end

rule "fourConsecutiveHomeMatches"
  when
    $m : Match($homeTeam : homeTeam, $day1 : day);
    Match(homeTeam == $homeTeam, eval(day.getIndex() == $day1.getIndex() + 1));
    Match(homeTeam == $homeTeam, eval(day.getIndex() == $day1.getIndex() + 2));
    Match(homeTeam == $homeTeam, eval(day.getIndex() == $day1.getIndex() + 3));
  then
    insertLogical(new WorkaroundMultiplePatternAccumulate("fourConsecutiveHomeMatches", $m));
end

rule "fourConsecutiveAwayMatches"
  when
    $m : Match($awayTeam : awayTeam, $day1 : day);
    Match(awayTeam == $awayTeam, eval(day.getIndex() == $day1.getIndex() + 1));
    Match(awayTeam == $awayTeam, eval(day.getIndex() == $day1.getIndex() + 2));
    Match(awayTeam == $awayTeam, eval(day.getIndex() == $day1.getIndex() + 3));
  then
    insertLogical(new WorkaroundMultiplePatternAccumulate("fourConsecutiveAwayMatches", $m));
end

rule "matchRepeater"
  when
    $m : Match($homeTeam : homeTeam, $awayTeam : awayTeam, $day1 : day);
    Match(homeTeam == $awayTeam, awayTeam == $homeTeam, eval(day.getIndex() == $day1.getIndex() + 1));
  then
    insertLogical(new WorkaroundMultiplePatternAccumulate("matchRepeater", $m));
end

rule "hardConstraintsBroken"
  salience -1 // Finish the other rules first (optional, for performance)
  when
    $hardCount : Number() from accumulate(
       $w : WorkaroundMultiplePatternAccumulate(),
       // countInteger($w) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
       count($w) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
    );
  then
    scoreCalculator.setHardConstraintsBroken($hardCount.intValue());
end

rule "startToAwayHop"
  when
    Match($toTeam : homeTeam, $team : awayTeam, $day : day);
    not Day(eval(index == $day.getIndex() - 1));
  then
    insertLogical(new Hop($team, $team, $toTeam));
end
rule "homeToAwayHop"
  when
    Match($team : homeTeam, $day1 : day);
    Match($toTeam : homeTeam, awayTeam == $team, eval(day.getIndex() == $day1.getIndex() + 1));
  then
    insertLogical(new Hop($team, $team, $toTeam));
end
rule "awayToAwayHop"
  when
    Match($fromTeam : homeTeam, $team : awayTeam, $day1 : day);
    Match($toTeam : homeTeam, awayTeam == $team, eval(day.getIndex() == $day1.getIndex() + 1));
  then
    insertLogical(new Hop($team, $fromTeam, $toTeam));
end
rule "awayToHomeHop"
  when
    Match($fromTeam : homeTeam, $team : awayTeam, $day1 : day);
    Match(homeTeam == $team, eval(day.getIndex() == $day1.getIndex() + 1));
  then
    insertLogical(new Hop($team, $fromTeam, $team));
end
rule "awayToEndHop"
  when
    Match($fromTeam : homeTeam, $team : awayTeam, $day : day);
    not Day(eval(index == $day.getIndex() + 1));
  then
    insertLogical(new Hop($team, $fromTeam, $team));
end

rule "softConstraintsBroken"
  salience -1 // Finish the other rules first (optional, for performance)
  when
    $totalDistance : Number() from accumulate(
       Hop($distance : distance),
       // sumInteger($distance) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
       sum($distance) // Vote for http://jira.jboss.com/jira/browse/JBRULES-1075
    );
  then
    scoreCalculator.setSoftConstraintsBroken($totalDistance.intValue());
end
